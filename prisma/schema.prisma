// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PENDING
  APPROVED
  REJECTED
}

model User {
  id         Int          @id @default(autoincrement())
  fullname   String
  email      String?      @unique
  login      String       @unique
  password   String
  token      Token?
  events     Event[]
  isAdmin    Boolean      @default(false)
  payments   Payment[]
  orderMedia OrderMedia[]
}

model Media {
  id          String       @id @default(cuid())
  filename    String       @unique
  fullVersion String       @unique
  preview     String       @unique
  order       Int
  member      Member       @relation(fields: [memberId], references: [id])
  memberId    String
  createdAt   DateTime     @default(now())
  orderMedia  OrderMedia[]
}

model Payment {
  id       String        @id @default(cuid())
  amount   Int
  status   PaymentStatus @default(PENDING)
  user     User          @relation(fields: [userId], references: [id])
  userId   Int
  systemId String        @unique
  order    Order?
}

model OrderMedia {
  id      String @id @default(cuid())
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String

  requiresProcessing Boolean  @default(false)
  processingPrice    Decimal? @db.Decimal(10, 2)

  processedPreview     String?
  processedFullVersion String?
  processedAt          DateTime?

  displayOrder Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyers User[]

  @@unique([orderId, mediaId])
  @@index([orderId])
  @@index([mediaId])
  @@index([orderId, requiresProcessing])
}

model Order {
  id         String       @id @default(cuid())
  status     OrderStatus  @default(WAITING_FOR_PAYMENT)
  createdAt  DateTime     @default(now())
  orderMedia OrderMedia[]
  payment    Payment      @relation(fields: [paymentId], references: [id])
  paymentId  String       @unique
}

model Member {
  id       String  @id @default(cuid())
  media    Media[]
  speech   Speech  @relation(fields: [speechId], references: [id])
  speechId String
}

model Speech {
  id      String   @id @default(cuid())
  name    String?
  members Member[]
  flow    Flow     @relation(fields: [flowId], references: [id])
  flowId  String
}

model Flow {
  id        String   @id @default(cuid())
  name      String
  from      DateTime
  to        DateTime
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  speeches  Speech[]
  createdAt DateTime @default(now())
}

model Event {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  buyers    User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flows     Flow[]
}

model Token {
  id     String @id @default(cuid())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}
